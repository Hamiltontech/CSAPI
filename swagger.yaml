openapi: 3.0.1
info:
  title: Odoo CSMENA HR Integration API
  description: API for accessing HR, Projects, Tasks, and Assignments data from Odoo
  version: 1.0.0
servers:
  - url: https://csmena-training-20065801.dev.odoo.com/
    description: staging server
  - url: https://csmena.odoo.com
    description: Production server
tags:
  - name: Employees
    description: Operations related to employees
  - name: Assignments
    description: Operations related to employee assignments
  - name: Projects
    description: Operations related to projects
  - name: Tasks
    description: Operations related to tasks
  - name: Departments
    description: Operations related to departments
  - name: Jobs
    description: Operations related to job positions

paths:
  /api/v1/employees/details:
    get:
      tags: [Employees]
      summary: Get detailed employee information
      description: Returns comprehensive details about all employees
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmployeeDetails'

  /api/v1/employees:
    get:
      tags: [Employees]
      summary: Get employee information with active assignments
      description: Returns employee information including their active assignments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmployeeWithAssignments'

  /api/v1/Assignments:
    get:
      tags: [Assignments]
      summary: Get all assignments
      description: Returns information about all assignments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Assignment'

  /api/v1/projects:
    get:
      tags: [Projects]
      summary: Get all projects
      description: Returns information about all projects including their tasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'

  /api/v1/tasks:
    get:
      tags: [Tasks]
      summary: Get all tasks
      description: Returns information about all tasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'

  /api/v1/jobs:
    get:
      tags: [Jobs]
      summary: Get all job positions
      description: Returns information about all job positions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'

  /api/v1/departments:
    get:
      tags: [Departments]
      summary: Get all departments
      description: Returns information about all departments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Department'

  /api/v1/assignment/create:
    post:
      tags: [Assignments]
      summary: Create a new assignment
      description: Creates a new employee assignment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentInput'
      responses:
        '200':
          description: Assignment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    $ref: '#/components/schemas/Assignment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assignment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/assignment/{assignment_id}/update:
    put:
      tags: [Assignments]
      summary: Update an assignment
      description: Updates an existing assignment
      security:
        - bearerAuth: []
      parameters:
        - name: assignment_id
          in: path
          description: ID of the assignment to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentInput'
      responses:
        '200':
          description: Assignment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    $ref: '#/components/schemas/Assignment'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assignment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Available authorizations - Bearer token
      
  schemas:
    EmployeeDetails:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        active:
          type: boolean
          example: true
        department_id:
          type: array
          items:
            type: integer
          example: [1, "IT Department"]
        # Include all other employee fields from your implementation
        # This is a simplified version - you should include all relevant fields

    EmployeeWithAssignments:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        hrid:
          type: string
          example: EMP001
        department:
          type: string
          example: IT
        job_title:
          type: string
          example: Software Developer
        active_assignment:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'

    Assignment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Assignment 1
        status:
          type: string
          example: active
        start_date:
          type: string
          format: date-time
          example: "2023-01-01 00:00:00"
        end_date:
          type: string
          format: date-time
          example: "2023-12-31 00:00:00"
        project:
          $ref: '#/components/schemas/ProjectShort'
        task:
          $ref: '#/components/schemas/TaskShort'
        employee:
          $ref: '#/components/schemas/EmployeeShort'
        created_by:
          type: string
          example: Admin User
        created_date:
          type: string
          format: date-time
          example: "2023-01-01 00:00:00"

    AssignmentInput:
      type: object
      required:
        - start_date
        - project_id
        - task_id
        - employee_id
        - operational_id
      properties:
        start_date:
          type: string
          format: date-time
          description: Start date of the assignment
          example: "2023-01-01 00:00:00"
        end_date:
          type: string
          format: date-time
          description: End date of the assignment (optional)
          example: "2023-12-31 00:00:00"
        project_id:
          type: integer
          description: ID of the project
          example: 1
        task_id:
          type: integer
          description: ID of the task
          example: 1
        employee_id:
          type: integer
          description: ID of the employee
          example: 1
        operational_id:
          type: integer
          description: Operational ID for the assignment
          example: 1001

    Project:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Project X
        description:
          type: string
          example: A sample project
        active:
          type: boolean
          example: true
        task_count:
          type: integer
          example: 5
        date_start:
          type: string
          format: date
          example: "2023-01-01"
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskShort'

    ProjectShort:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Project X
        active:
          type: boolean
          example: true

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Task 1
        active:
          type: boolean
          example: true
        date_end:
          type: string
          format: date-time
          example: "2023-12-31 00:00:00"
        project:
          $ref: '#/components/schemas/ProjectShort'
        created_by:
          type: string
          example: Admin User
        created_date:
          type: string
          format: date-time
          example: "2023-01-01 00:00:00"

    TaskShort:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Task 1
        create_date:
          type: string
          format: date-time
          example: "2023-01-01 00:00:00"
        created_by:
          type: string
          example: Admin User

    Job:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Software Developer
        no_of_employee:
          type: integer
          example: 5
        employee_ids:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeShort'
        description:
          type: string
          example: Develops software applications

    Department:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: IT
        directory:
          type: string
          example: Company/IT
        total_employee:
          type: integer
          example: 10
        member_ids:
          type: array
          items:
            $ref: '#/components/schemas/EmployeeShort'

    EmployeeShort:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        department:
          type: object
          properties:
            department_id:
              type: integer
              example: 1
            department_name:
              type: string
              example: IT

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Error description
        details:
          type: object
          properties:
            field_name:
              type: string
              example: Additional error details
