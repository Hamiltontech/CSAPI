openapi: 3.0.0
info:
  title: HR Integration API
  description: API for accessing HR-related data including employees, assignments, projects, and tasks
  version: 1.0.0
servers:
  - url: https://your-odoo-instance.com
    description: Production server

tags:
  - name: Employees
    description: Operations related to employees
  - name: Assignments
    description: Operations related to employee assignments
  - name: Projects
    description: Operations related to projects
  - name: Tasks
    description: Operations related to tasks

paths:
  /api/v1/employees/details:
    get:
      tags: [Employees]
      summary: Get comprehensive details for all employees
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmployeeDetails'
      security:
        - basicAuth: []

  /api/v1/employees:
    get:
      tags: [Employees]
      summary: Get employees with active assignments
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmployeeWithAssignments'
      security:
        - basicAuth: []

  /api/v1/Assignments:
    get:
      tags: [Assignments]
      summary: Get all assignments
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Assignment'
      security:
        - basicAuth: []

  /api/v1/projects:
    get:
      tags: [Projects]
      summary: Get all projects
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
      security:
        - basicAuth: []

  /api/v1/tasks:
    get:
      tags: [Tasks]
      summary: Get all tasks
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
      security:
        - basicAuth: []

  /api/v1/assignment/create:
    post:
      tags: [Assignments]
      summary: Create a new assignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentInput'
      responses:
        '200':
          description: Assignment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    $ref: '#/components/schemas/Assignment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - basicAuth: []

  /api/v1/assignment/{assignment_id}/update:
    put:
      tags: [Assignments]
      summary: Update an existing assignment
      parameters:
        - in: path
          name: assignment_id
          required: true
          schema:
            type: integer
          description: ID of the assignment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentInput'
      responses:
        '200':
          description: Assignment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    $ref: '#/components/schemas/Assignment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Assignment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - basicAuth: []

components:
  schemas:
    EmployeeDetails:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        department_id:
          type: integer
          example: 5
        job_title:
          type: string
          example: Software Developer
        # Add all other employee fields here
      example:
        id: 1
        name: John Doe
        department_id: 5
        job_title: Software Developer
        work_email: john.doe@example.com

    EmployeeWithAssignments:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        hrid:
          type: string
          example: EMP001
        department:
          type: string
          example: IT
        job_title:
          type: string
          example: Software Developer
        active_assignment:
          type: array
          items:
            $ref: '#/components/schemas/AssignmentShort'

    AssignmentShort:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Project X Assignment
        status:
          type: string
          example: active
        start_date:
          type: string
          format: date
          example: "2023-01-01"
        project:
          type: string
          example: Project X

    Assignment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Project X Assignment
        status:
          type: string
          example: active
        start_date:
          type: string
          format: date
          example: "2023-01-01"
        end_date:
          type: string
          format: date
          example: "2023-12-31"
        project:
          $ref: '#/components/schemas/ProjectShort'
        task:
          $ref: '#/components/schemas/TaskShort'
        employee:
          $ref: '#/components/schemas/EmployeeShort'

    ProjectShort:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Project X
        active:
          type: boolean
          example: true

    TaskShort:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Implement Feature Y
        create_date:
          type: string
          format: date-time

    EmployeeShort:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        hrid:
          type: string
          example: EMP001
        department:
          type: string
          example: IT

    Project:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Project X
        description:
          type: string
        active:
          type: boolean
          example: true
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskShort'

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Implement Feature Y
        active:
          type: boolean
          example: true
        project:
          $ref: '#/components/schemas/ProjectShort'

    AssignmentInput:
      type: object
      required:
        - start_date
        - project_id
        - task_id
        - employee_id
        - operational_id
      properties:
        start_date:
          type: string
          format: date-time
          example: "2023-01-01 00:00:00"
        end_date:
          type: string
          format: date-time
          example: "2023-12-31 00:00:00"
        project_id:
          type: integer
          example: 1
        task_id:
          type: integer
          example: 1
        employee_id:
          type: integer
          example: 1
        operational_id:
          type: integer
          example: 123

    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Error description

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Use admin/admin credentials